worker_processes  auto;

pid        logs/nginx-dev-test.pid;

events {
	worker_connections  32768;
	accept_mutex off;
	multi_accept on;

}

error_log logs/error_dev_test.log;
http {
	include       mime.types;
	default_type  application/octet-stream;

    log_format  main '$remote_addr $server_addr $remote_user [$time_local] $host '
        '"$request" $status $body_bytes_sent $request_time "$upstream_addr" "$upstream_response_time" '
        '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    log_format  detail '$remote_addr $server_addr $remote_user [$time_local] $host '
        '"$request" $status $body_bytes_sent $request_time $upstream_addr $upstream_response_time '
        '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" "$request_body" "$resp_body"';

	sendfile        on;

	keepalive_timeout  75;
    keepalive_requests 32768;

	access_log logs/access_dev_test.log main;

	include tegine_upstream.conf;

    lua_code_cache on;
    lua_package_path "../?.lua;../lib/?.lua;../lib/lua-resty-core/lib/?.lua;;";

	server {
		listen 80;
		server_name testapi-dev.test.com
		add_header 'Access-Control-Allow-Origin' "$http_origin";
		add_header 'Access-Control-Allow-Credentials' 'true';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTION, HEAD';
		proxy_next_upstream http_502 http_504 error timeout invalid_header;
		proxy_connect_timeout 20s;
		lua_need_request_body on;

		set $resp_body "";
		body_filter_by_lua '
			local resp_body = string.sub(ngx.arg[1], 1, 2000)
			ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
			if ngx.arg[2] then
				ngx.var.resp_body = ngx.ctx.buffered
			end
		';
		access_log logs/access_dev_test.log  detail;
		location = /hello {
			default_type text/html;

			content_by_lua_block {
				ngx.say("HelloWorld")
			}
		}
		location / {
			proxy_pass http://gateway;
		}
		location ~ /carno {
			proxy_pass http://gateway;
		}
	}

}
